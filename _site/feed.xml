<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gray&#39;s Blog</title>
    <description>这里是一位准程序员的博客，我将在这里记录近期工作以及编程相关的读书笔记
</description>
    <link>http://wuxichen.github.io/Myblog/</link>
    <atom:link href="http://wuxichen.github.io/Myblog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 09 Sep 2014 16:10:08 +0800</pubDate>
    <lastBuildDate>Tue, 09 Sep 2014 16:10:08 +0800</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>【环境搭建】Jekyll中采用Pygments实现语法高亮</title>
        <description>&lt;p&gt;&lt;br&gt;
&amp;emsp;&amp;emsp;    Pygments可以实现多种代码语法的高亮，在搭建Jekyll博客的过程中，可以利用python setuptools安装，比较方便。但在安装过程中会有&lt;code&gt;UnicodeDecodeError&lt;/code&gt;错误，解决方法可见本文第一部分。&lt;br&gt;
&amp;emsp;&amp;emsp;    本机环境：Windows 7 64位操作系统，python 2.7（32位），Jekyll 2.3.0&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;1. 安装 setuptools&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;1) 下载&amp;quot;ez_setup.py&amp;quot;，网址为：&lt;a href=&quot;https://pypi.python.org/pypi/setuptools#windows-7-or-graphical-install&quot;&gt;https://pypi.python.org/pypi/setuptools#windows-7-or-graphical-install&lt;/a&gt;&lt;br&gt;
2) 此时，用运行该脚本&lt;code&gt;python ez_setup.py&lt;/code&gt;，会出现错误：&lt;br&gt;
&lt;code&gt;UnicodeDecodeError: &amp;#39;ascii&amp;#39; codec can&amp;#39;t decode byte 0xb3 in position 3: ordinal not in range(128)&lt;/code&gt;&lt;br&gt;
&amp;emsp;&amp;emsp;    解决方法：根据错误提示，找到python的lib目录中&lt;codde&gt;mimetypes.py&lt;/code&gt;文件，并在其中找到如下代码，并修改，之后再次运行即可通过。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;default_encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 将该行代码改为：默认编码采用GBK而非UTF8&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# default_encoding = sys.getdefaultencoding()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;gbk&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;gbk&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;default_encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;2. 安装 Pygments&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;    安装完setuptools之后，保证环境变量中包含Python的Script文件夹（路径），运行命令：&lt;code&gt;easy_install Pygments&lt;/code&gt;，即可安装Pygments。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;3. 使用Pygments实现语法高亮&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;    Pygments提供了多种样式，可以在Pygments官网的Demo中选择某种语言的例子，体验不同的样式。另外，通过下面的命令可以查看当前支持的样式：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pygments.styles&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STYLE_MAP&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STYLE_MAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;    选择一种样式，如native，运行如下命令，生成样式文件pygments.css，并将其包含进网站样式表中。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pygmentize -S native -f html &amp;gt; pygments.css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 09 Sep 2014 23:00:00 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/backup/2014/09/09/JekyllPygments.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/backup/2014/09/09/JekyllPygments.html</guid>
        
        
        <category>backup</category>
        
      </item>
    
      <item>
        <title>Jekyll搭建过程中的Git命令</title>
        <description>&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;搭建环境，推送至Github&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;创建Jekyll的新目录 &lt;br&gt;&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;git init&lt;/code&gt; &lt;br&gt;&lt;/li&gt;
&lt;li&gt;创建分支gh-pages：&lt;code&gt;git checkout --orphan gh-pages&lt;/code&gt; &lt;br&gt;&lt;/li&gt;
&lt;li&gt;提交到本地git库中： &lt;br&gt;
&lt;code&gt;git add --all . &lt;br&gt;
git commit  -m &amp;quot;first post&amp;quot;&lt;/code&gt; &lt;br&gt;&lt;/li&gt;
&lt;li&gt;到github上建同名库“Myblog”：&lt;br&gt; 
&lt;code&gt;git remote add myblog(新的仓库名) https://github.com/(username)/Myblog.git&lt;/code&gt; &lt;br&gt;&lt;/li&gt;
&lt;li&gt;推送到github上：&lt;code&gt;git push myblog gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;解决插件禁用问题&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;  Jekyll提供了插件功能，在网站源代码目录下，有一个名为&lt;code&gt;_plugins&lt;/code&gt;的目录，可以将一些插件放进去，这样，Jekyll在解析网站源代码时，就会运行其中的插件。例如我的博客中用到的分类功能，就是利用一项插件而得到的。&lt;br&gt;
&amp;emsp;&amp;emsp;  在本地运行Jekyll时，这些插件会自动被调用，但是GitHub在解析网站源代码时，出于安全考虑，会开启安全模式，禁用这些插件。此时，GitHub为我们提供了另一种解析网站的方式，那就是直接上传最终的静态网页。这样，我们可以在本地使用Jeklly把网站解析出来，然后再上传到GitHub上， 这就使得我们既使用了插件，又使用了 GitHub。&lt;br&gt;
&amp;emsp;&amp;emsp;  要想实现这一效果，&lt;span class=&quot;redfont&quot;&gt;我们需要维护两个分支，一个是网站的源代码分支，另一个是Jeklly 解析源代码后生成的静态网站&lt;/span&gt;。&lt;br&gt;
&amp;emsp;&amp;emsp;  例如，我的源代码分支名为&lt;code&gt;source&lt;/code&gt;，静态网站分支名为&lt;code&gt;gh-pages&lt;/code&gt;。平时写博客时，首先在&lt;code&gt;master&lt;/code&gt;分支下，添加新文章，然后本地使用&lt;code&gt;jekyll build&lt;/code&gt;将添加文章后的网站解析一次，这时&lt;code&gt;_site&lt;/code&gt;目录下就有新网站的静态代码了。然后把这个目录下的所有内容复制到&lt;code&gt;gh-pages&lt;/code&gt;分支下。以下为脚本命令：   &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;
git add --all .
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;deploy blog&amp;quot;&lt;/span&gt;
cp -r _site/ /tmp/
git checkout gh-pages
rm -r ./*
cp -r /tmp/_site/* ./
git add --all .
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;deploy blog&amp;quot;&lt;/span&gt;
git push origin gh-pages
git checkout &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 04 Sep 2014 01:00:00 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/backup/2014/09/04/git-jekyll.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/backup/2014/09/04/git-jekyll.html</guid>
        
        
        <category>backup</category>
        
      </item>
    
      <item>
        <title>Eclipse 常用快捷键</title>
        <description>&lt;p&gt;本文总结了Eclipse常用的快捷键，作为备忘，这些能够有效地提高编码效率。
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;1. 极其常用快捷键&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Alt + /&lt;/strong&gt; &amp;emsp;&amp;emsp;&amp;emsp;此快捷键为用户编辑的好帮手，能为用户&lt;span class=&quot;redfont&quot;&gt;提供内容的辅助&lt;/span&gt;，不要为记不全方法和属性名称犯愁&lt;br&gt;
&lt;strong&gt;Ctrl + /&lt;/strong&gt;    &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;快速添加注释&lt;/span&gt;，能为光标所在行或所选定行快速添加注释或取消注释&lt;br&gt;
&lt;strong&gt;Ctrl + Shift + /&lt;/strong&gt;    &amp;emsp;&amp;emsp;&amp;emsp;在代码窗口中是这种&lt;code&gt;/*注释*/&lt;/code&gt;&lt;span class=&quot;redfont&quot;&gt;注释&lt;/span&gt;，在JSP文件窗口中是&lt;code&gt;&amp;lt; ! -- 注释 -- &amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Ctrl + D&lt;/strong&gt;    &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;删除当前行&lt;/span&gt;，不用为删除一行而按那么多次的删除键&lt;br&gt;
&lt;strong&gt;Ctrl + Shift + F&lt;/strong&gt;    &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;格式化代码&lt;/span&gt;，选定后按Ctrl+Shift+F快捷键可以格式化这段代码，如果不选定代码则默认格式化当前文件（Java文件）  &lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Alt + ← &amp;amp; Alt + →&lt;/strong&gt;   &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;后退历史记录和前进历史记录&lt;/span&gt;，在跟踪代码时非常有用，用户可能查找了几个有关联的地方，但可能记不清楚了，可以通过这两个快捷键定位查找的顺序&lt;br&gt;
&lt;strong&gt;Ctrl + Q&lt;/strong&gt;    &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;回到最后一次编辑的地方&lt;/span&gt;，这个快捷键也是当你在代码中跳转后用的&lt;br&gt;
&lt;strong&gt;Ctrl + . &amp;amp; Ctrl + 1&lt;/strong&gt;     &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;下一个错误及修改建议&lt;/span&gt;&amp;nbsp;Ctrl + . 将光标移动至当前文件中的下一个报错处或警告处，一般与ctrl+1一并使用，即修改建议的快捷键&lt;br&gt;
&lt;strong&gt;Alt + 上下键&lt;/strong&gt;     &amp;emsp;&amp;emsp;&amp;emsp;这个组合将&lt;span class=&quot;redfont&quot;&gt;当前行的内容往上或下移动&lt;/span&gt;。在try/catch部分，这个快捷方式尤其好使&lt;br&gt;
&lt;strong&gt;Ctrl + Alt + 上下键&lt;/strong&gt;      &amp;emsp;&amp;emsp;&amp;emsp;这个组合将&lt;span class=&quot;redfont&quot;&gt;当前行的内容复制后往上或下移动&lt;/span&gt;&lt;br&gt;
&lt;strong&gt;Shift + Enter &amp;amp; Ctrl + Shift + Enter&lt;/strong&gt;    &amp;emsp;&amp;emsp;&amp;emsp;Shift + Enter在&lt;span class=&quot;redfont&quot;&gt;当前行之下创建一个空白行&lt;/span&gt;，与光标是否在行末无关；Ctrl + Shift + Enter则在&lt;span class=&quot;redfont&quot;&gt;当前行之前插入空白行&lt;/span&gt;&lt;br&gt;
&lt;strong&gt;Ctrl + 2&lt;/strong&gt;&lt;br&gt;
&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&lt;strong&gt;+ L&lt;/strong&gt;     &amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;为本地变量赋值&lt;/span&gt;，开发过程中，常常先编写方法，如&lt;code&gt;Calendar.getInstance()&lt;/code&gt;，然后通过 Ctrl + 2 + L 快捷键将方法的计算结果赋值于一个本地变量之上，如下所示：  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Canlendar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Canlendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
   

&lt;p&gt;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&lt;strong&gt;+ F&lt;/strong&gt;     &amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;为类成员变量赋值&lt;/span&gt;，把方法的计算结果赋值于类中的域（成员变量）：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Canlendar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Canlendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&lt;strong&gt;+ R&lt;/strong&gt;     &amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;重命名光标所在的同名变量&lt;/span&gt;&lt;br&gt;
&lt;strong&gt;Ctrl + E&lt;/strong&gt;    &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;快速转换编辑器&lt;/span&gt;，在打开的编辑器之间浏览。使用&lt;strong&gt;Ctrl + PageDown&lt;/strong&gt;或&lt;strong&gt;Ctrl + PageUp&lt;/strong&gt;可以浏览前后的选项卡，但是在很多文件打开的状态下，Ctrl + E会更加有效率&lt;br&gt;
&lt;strong&gt;Ctrl + M&lt;/strong&gt;    &amp;emsp;&amp;emsp;&amp;emsp;编辑器&lt;span class=&quot;redfont&quot;&gt;窗口最大化&lt;/span&gt;的快捷键&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;2. 查找定位快捷键&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Ctrl + K &amp;amp; Ctrl + Shift + K&lt;/strong&gt;     &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;快速向下和向上查找选定的内容&lt;/span&gt;，从此不再需要用鼠标单击查找对话框了&lt;br&gt;
&lt;strong&gt;Ctrl + Shift + T&lt;/strong&gt;        &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;查找&lt;/span&gt;工作空间构建路径中的可找到&lt;span class=&quot;redfont&quot;&gt;Java类文件&lt;/span&gt;，而且可以使用&amp;quot;*&amp;quot;, &amp;quot;?&amp;quot;等通配符&lt;br&gt;
&lt;strong&gt;Ctrl + Shift + R&lt;/strong&gt;        &amp;emsp;&amp;emsp;&amp;emsp;和Ctrl+Shift+T对应，&lt;span class=&quot;redfont&quot;&gt;查找&lt;/span&gt;工作空间中的&lt;span class=&quot;redfont&quot;&gt;所有文件（包括Java文件&lt;/span&gt;，也可以使用通配符&lt;br&gt;
&lt;strong&gt;Ctrl + Shift + G&lt;/strong&gt;        &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;查找类、方法和属性的引用&lt;/span&gt;，这是一个非常实用的快捷键，例如要修改引用某个方法的代码，可以通过该快捷键迅速定位所有引用此方法的位置&lt;br&gt;
&lt;strong&gt;Ctrl + L&lt;/strong&gt;    &amp;emsp;&amp;emsp;&amp;emsp;&lt;span class=&quot;redfont&quot;&gt;定位到当前编辑器的某一行&lt;/span&gt;，对非Java文件也有效  &lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;3. 申明调用导入快捷键&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Ctrl + O&lt;/strong&gt;        &amp;emsp;&amp;emsp;&amp;emsp;显示类中&lt;span class=&quot;redfont&quot;&gt;方法和属性的大纲&lt;/span&gt;，能快速定位类的方法和属性，在查找Bug时非常有用&lt;br&gt;
&lt;strong&gt;F3&lt;/strong&gt;      &amp;emsp;&amp;emsp;&amp;emsp;选中代码中的一个方法&lt;span class=&quot;redfont&quot;&gt;打开申明&lt;/span&gt;，或者，利用Declaration Tab（在Java视图模式下，选择Windows --&amp;gt; Show View -- &amp;gt; Declaration）&lt;br&gt;
&lt;strong&gt;Ctrl + Shift + G&lt;/strong&gt;        &amp;emsp;&amp;emsp;&amp;emsp;在workspace中搜索引用（作用和F3恰好相反）。它使你在方法的栈中，向上找出一个方法的&lt;span class=&quot;redfont&quot;&gt;所有调用者&lt;/span&gt;&lt;br&gt;
&lt;strong&gt;Ctrl + Alt + H&lt;/strong&gt;          &amp;emsp;&amp;emsp;&amp;emsp;显示出这个方法&lt;span class=&quot;redfont&quot;&gt;被哪些方法调用&lt;/span&gt;，最终产生一个调用关系树&lt;br&gt;
&lt;strong&gt;Ctrl + Shift + M&lt;/strong&gt;        &amp;emsp;&amp;emsp;&amp;emsp;（先把光标放在需导入包的类名上）作用是&lt;span class=&quot;redfont&quot;&gt;加Import语句&lt;/span&gt;&lt;br&gt;
&lt;strong&gt;Ctrl + Shift + O&lt;/strong&gt;        &amp;emsp;&amp;emsp;&amp;emsp;作用是&lt;span class=&quot;redfont&quot;&gt;缺少的Import语句被加入，多余的Import语句被删除&lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Sep 2014 21:00:00 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/backup/2014/09/02/eclipsekeys.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/backup/2014/09/02/eclipsekeys.html</guid>
        
        
        <category>backup</category>
        
      </item>
    
      <item>
        <title>【环境搭建】Redhat 5.8系统安装R语言作Arima模型预测</title>
        <description>&lt;p&gt;最近有项目要在服务器上作时间序列预测的工作，采用Arima模型预测，用java调用Arima的R语言命令进行。
本文记录的是在服务器（Red Hat 5.8）上的搭建工作，供参考！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;1. 安装C compiler&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;grayfont&quot;&gt;
（无用，版本太低，但可作为高版本的基础，否则无编译器的话无法编译高版本）&lt;br&gt;
1）装gcc：yum install gcc&lt;br&gt;
2）装f77：yum install gcc-gfortran&lt;br&gt;
3）装cpp：yum install glibc-headers&lt;br&gt;
yum install gcc-c++&lt;/p&gt;

&lt;h2&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;在装有低版本的gcc情况下，执行如下步骤&lt;/strong&gt;&lt;br&gt;
&lt;a href=&quot;%EF%BC%88%E9%83%A8%E5%88%86%E5%8F%82%E8%80%83http://www.tuicool.com/articles/AZvEBr%EF%BC%89&quot; title=&quot;参考博客&quot;&gt;（部分参考http://www.tuicool.com/articles/AZvEBr）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1）装M4：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; 到M4的文件夹
./configure
make
make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2）装GMP：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; 到GMP文件夹
./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/gmp-4.3.2
make
make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3）装MPFR：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; 到MPFR的文件夹
./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/mpfr-2.4.2 --with-gmp&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/gmp-4.3.2/
make
make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4）装MPC：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; 到MPC的文件夹
./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/mpc-0.8.1 --with-gmp&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/gmp-4.3.2/ --with-mpfr&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/mpfr-2.4.2/ 
make
make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5）修改环境变量：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vi .bash_profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;文件后面加：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LD_LIBRARY_PATH&lt;/span&gt;:/usr/local/gmp-4.3.2/lib/:/usr/local/mpfr-2.4.2/lib/:/usr/local/mpc-0.8.1/lib/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;redfont&quot;&gt;&lt;strong&gt;（令其生效）source .bash_profile&lt;/strong&gt;&lt;/span&gt;&lt;br&gt;
6）装gcc：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; 到gcc文件夹
./configure --enable-threads&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;posix --disable-checking --with-gmp&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/gmp-4.3.2/ --with-mpfr&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/mpfr-2.4.2/ --with-mpc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/mpc-0.8.1/  
make
make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;7）若有两个版本的gcc就换成高版本的
mv 重命名
cp 将[&lt;span class=&quot;redfont&quot;&gt;gcc g++ gcj&lt;/span&gt;（cpp c++这两个可以忽略）]复制到 /usr/bin&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;2. 安装R-3.1.1&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;1）移到R-3.1.1目录下&lt;br&gt;
2）
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yum install readline-devel
yum install libXt-devel&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;3）
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/R-3.1.1 --enable-R-shlib&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;4）
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make
make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;3. 配置环境变量&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;1) 打开bash_profile文件  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vi .bash_profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  

&lt;p&gt;2) 在PATH最后加上 &lt;code&gt;“:$HOME/usr/R-3.1.1/bin”&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;3) 退出vim，并保存  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; .bash_profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;4. R语言控制台安装完毕，输入命令&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;1) 终端中输入“R”即可进入R语言控制台&lt;/p&gt;

&lt;p&gt;2) 输入如下命令，安装相关工具包：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Rserve&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TTR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;forecast&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;5. 运行java程序&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;1) Java工程中嵌入两个jar包：&lt;code&gt;REngine.jar&lt;/code&gt; 和 &lt;code&gt;RserveEngine.jar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) 开始运行，启动Rserve&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;kn&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;Rserve&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
Rserve&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
附文件下载地址：&lt;br&gt;
&lt;a href=&quot;http://gcc.petsads.us/releases/gcc-4.6.4/gcc-4.6.4.tar.gz&quot;&gt;http://gcc.petsads.us/releases/gcc-4.6.4/gcc-4.6.4.tar.gz&lt;/a&gt;
&lt;a href=&quot;http://ftp.gnu.org/gnu/m4/m4-1.4.5.tar.gz&quot;&gt;http://ftp.gnu.org/gnu/m4/m4-1.4.5.tar.gz&lt;/a&gt; 
&lt;a href=&quot;ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-4.3.2.tar.bz2&quot;&gt;ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-4.3.2.tar.bz2&lt;/a&gt; 
&lt;a href=&quot;ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-0.8.1.tar.gz&quot;&gt;ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-0.8.1.tar.gz&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-2.4.2.tar.bz2&quot;&gt;ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-2.4.2.tar.bz2&lt;/a&gt; &lt;/p&gt;
</description>
        <pubDate>Tue, 02 Sep 2014 01:00:00 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/timeseries/2014/09/02/RJavaonLinux.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/timeseries/2014/09/02/RJavaonLinux.html</guid>
        
        
        <category>timeseries</category>
        
      </item>
    
      <item>
        <title>【图表展示】JFreeChart画折线图</title>
        <description>&lt;p&gt;JFreeChart的关键在于其数据集类型的选择，如果是标签类的数据集就采用CategoryDataset，有序数字类的数据集就采用XYSeriesCollection。
更多数据集类型的内容参考如下博客：&lt;a href=&quot;http://blog.csdn.net/lxrw2002/article/details/1897702&quot;&gt;JFreeChart 典型数据集设置示例&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;1. 选择合适的数据集类型&lt;/h4&gt;

&lt;p&gt;由于我只需要折线图的横坐标是有序数字，故采用XYSeriesCollection类型。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XYSeriesCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2. 向数据集中加入数据&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;XYSeries&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyseries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XYSeries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;reality&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;horizontal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xyseries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;horizontal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addSeries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyseries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中，&amp;quot;reality&amp;quot;是这条数据的名称；horizontal是横坐标的数组；reality数组是该条数据的各个值，作为数据点的纵坐标；最后，通过&lt;code&gt;addSeries()&lt;/code&gt;函数将该条数据加入到数据集中。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;3. 解决中文乱码问题&lt;/h4&gt;

&lt;p&gt;这里采用设定主题的方式，设置中文字体解决乱码问题，设置如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;standardChartTheme&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;standardChartTheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StandardChartTheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//设置标题字体  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;standardChartTheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setExtraLargeFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;宋体&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BOLD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//设置图例的字体  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;standardChartTheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRegularFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;宋体&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//设置轴向的字体  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;standardChartTheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLargeFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;宋体&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;//应用主题样式  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ChartFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setChartTheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standardChartTheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;4. 画图&lt;/h4&gt;

&lt;p&gt;要画折线图，则采用&lt;span class=&quot;redfont&quot;&gt;XYLineChart&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;JFreeChart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ChartFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createXYLineChart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;图表标题在这里&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;横坐标标题&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;纵坐标标题&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;将jfreechart放入java容器组件，并显示：  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ChartFrame&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chartFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ChartFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;窗口标题在这里&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;//chart要放在Java容器组件中，ChartFrame继承自java的Jframe类。该第一个参数的数据是放在窗口左上角的，不是正中间的标题。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chartFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//以合适的大小展现图形&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chartFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVisible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//图形是否可见&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;5. 设置背景色与纵坐标范围（补充）&lt;/h4&gt;

&lt;p&gt;jfree默认的背景色是灰色，看不清折线图，故将其改为白色&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;XYPlot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getXYPlot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBackgroundPaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChartColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRangeGridlinePaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChartColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GRAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;纵坐标的范围可以人为设定，如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;NumberAxis&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberaxis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumberAxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRangeAxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numberaxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAutoTickUnitSelection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numberaxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTickUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NumberTickUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//设置纵坐标值的间距(10)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numberaxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRangeWithMargins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//纵坐标值只能是这之间的值(0~100)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 01 Sep 2014 23:00:00 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/htmlcss/2014/09/01/JFreechartLinechart.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/htmlcss/2014/09/01/JFreechartLinechart.html</guid>
        
        
        <category>htmlcss</category>
        
      </item>
    
      <item>
        <title>微博人人开放平台授权</title>
        <description>&lt;p&gt;这里以人人网为例子，新浪微博的几乎一样。
附_官方指南：
人人网：&lt;a href=&quot;http://wiki.dev.renren.com/wiki/Authentication&quot;&gt;人人网开放平台官方指南&lt;/a&gt;
微博：&lt;a href=&quot;http://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6#Web.E5.BA.94.E7.94.A8.E7.9A.84.E9.AA.8C.E8.AF.81.E6.8E.88.E6.9D.83&quot;&gt;新浪微博开放平台官方指南&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;授权验证步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先要申请开放平台的&lt;strong&gt;API Key&lt;/strong&gt; 和 &lt;strong&gt;API Secret&lt;/strong&gt;，指南里有申请步骤&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;让用户点击以下地址连接（红色记号为自定部分）：
https://graph.renren.com/oauth/authorize?client_id=&lt;span class=&quot;redfont&quot;&gt;API Key&lt;/span&gt;&amp;amp;redirect_uri=&lt;span class=&quot;redfont&quot;&gt;http://127.0.0.1/test/get.php（转向地址,下一步创建这个文件）&lt;/span&gt;&amp;amp;response_type=code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在test目录下创建get.php文件，主要内容：&lt;br&gt;
1) 利用code才能获得access_token： &lt;code&gt;$code = $_GET[&amp;#39;code&amp;#39;];&lt;/code&gt;&lt;br&gt;
2) 以下是获取Access_Token的连接：&lt;br&gt;
$url = &amp;#39;https://graph.renren.com/oauth/token?grant_type=authorization_code&amp;amp;client_id=&lt;span class=&quot;redfont&quot;&gt;API Key&lt;/span&gt;&amp;amp;redirect_uri=&lt;span class=&quot;redfont&quot;&gt;http://127.0.0.1/test/get.php（同样是转向地址，自身文件就行）&lt;/span&gt;&amp;amp;client_secret=&lt;span class=&quot;redfont&quot;&gt;API Secret&lt;/span&gt;&amp;amp;code=&amp;#39;.&lt;span class=&quot;redfont&quot;&gt;$code（3.1中的code）&lt;/span&gt;;&lt;br&gt;
3) 用PHP的file_get_contents传递POST请求给$url，代码如下：  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$options = array( &amp;#39;http&amp;#39; =&amp;gt; array( &amp;#39;method&amp;#39; =&amp;gt; &amp;#39;POST&amp;#39;, &amp;#39;header&amp;#39; =&amp;gt; &amp;#39;Content-type:application/x-www-form-urlencoded&amp;#39; ) ); &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$content = stream_context_create( $options ); &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$result = file_get_contents( $url, false, $content ); &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$result = json_decode( $result );&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此时的&lt;code&gt;$result&lt;/code&gt;就含有&amp;#39;access_token&amp;#39;, &amp;#39;refresh_token&amp;#39;等，直接&lt;code&gt;$result[&amp;#39;access_token&amp;#39;]&lt;/code&gt;可以获取。  &lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;Notice：&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;“Warning: file_get_contents(): Unable to find the wrapper &amp;quot;https&amp;quot; - did you&lt;br&gt; forget to enable it when you configured PHP?...”&lt;/code&gt;&lt;br&gt;
这个错误，需要将php.ini中的&amp;quot;extension=php_openssl.dll&amp;quot;去掉前面的“;”  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;“Warning: file_get_contents(https://graph.renren.com/oauth/token?.....): &lt;br&gt;failed to open stream: HTTP request failed! HTTP/1.1 401 Unauthorized”&lt;/code&gt;&lt;br&gt;
这个错误，网上有很多种说法，比如开远程访问、user_agent设为firefox浏览器之类的，在我机子上这些设置无论开启与否都无影响，只是注意一点，也是我错的地方，$url中的地址不能有换行；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;另外就是转向地址本机写localhost识别不了还得写127.0.0.1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在抓取用户数据的时候，需要注意应用如果是没审核的状态一些API只能用于测试用户（这个再应用的界面可以设置），如果抓非测试用户的话会出现“Invalid Access Token”的错误，非常坑爹。。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;好了，之后就可以抓数据了~祝大家好运~&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Sep 2014 21:00:00 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/php/2014/09/01/WeiboRenrenAuthentication.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/php/2014/09/01/WeiboRenrenAuthentication.html</guid>
        
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>Git常用命令总结</title>
        <description>&lt;h2&gt;目录&lt;/h2&gt;

&lt;p&gt;&lt;span style=&quot;line-height: 30px;&quot;&gt;
&lt;a href=&quot;#t1&quot;&gt;1. Git创建及初始化: clone, init, remote&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;#t2&quot;&gt;2. 仓库中的文件操作: add, rm&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;#t3&quot;&gt;3. 提交修改内容: comit&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;#t4&quot;&gt;4. 与远程仓库的交互通信: push, pull, fetch, merge, diff&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;#t5&quot;&gt;5. 版本标签操作相关命令: tag&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;#t6&quot;&gt;6. 分支操作相关命令: branch&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;#t7&quot;&gt;7. 查看日志状态: log, show, status&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;#t8&quot;&gt;8. 版本库还原回退: reset, revert, rebase&lt;/a&gt;&lt;br&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a name=&quot;t1&quot;&gt;&lt;/a&gt;&lt;h3&gt;1. Git创建及初始化&lt;/h3&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;1) git clone&lt;/h4&gt;

&lt;p&gt;当有一个远程的Git版本库，可以用这种方法在本地克隆一份进行初始化&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote_project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_project&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的命令就是将&amp;#39;git://github.com/username/remote_project.git&amp;#39;这个URL地址的远程版本库，完全克隆到本地F:/local_project目录下  &lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;h4&gt;2) git init 和 git remote&lt;/h4&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当本地创建了一个工作目录，进入这个目录，使用&lt;code&gt;git init&lt;/code&gt;命令进行初始化；&lt;/li&gt;
&lt;li&gt;Git以后就会对该目录下的文件进行版本控制，这时候如果你需要将它放到远程服务器上，可以在远程服务器上创建一个目录，并把可访问的URL记录下来，此时可以利用&lt;code&gt;git remote add&lt;/code&gt;命令来增加一个远程服务器端。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another_project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的命令就会增加名为remote_name并且其URL地址为&amp;#39;git://github.com/username/another_project.git&amp;#39;的远程仓库，以后提交代码的时候只需要使用remote_name别名即可&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a name=&quot;t2&quot;&gt;&lt;/a&gt;&lt;h3&gt;2. 仓库中的文件操作&lt;/h3&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;1) git add 添加文件&lt;/h4&gt;

&lt;p&gt;将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 添加dir1这个目录，目录下的所有文件都被加入&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 添加f1，f2文件&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# 添加当前目录下的所有文件和子目录&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  

&lt;p&gt;&lt;br&gt;
&lt;h4&gt;2) git rm 删除文件&lt;/h4&gt;
从当前的工作空间中和索引中删除文件&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# 删除f(与add一样)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
&lt;h4&gt;3) 忽略特定文件&lt;/h4&gt;
在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a name=&quot;t3&quot;&gt;&lt;/a&gt;&lt;h3&gt;3. 提交修改内容&lt;/h3&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;提交当前工作目录的修改内容，可以直接调用&lt;code&gt;git commit&lt;/code&gt;命令，通过如下方式在命令行就填写提交注释：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;这里填写提交注释&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;git commit 命令的-a选项可只将所有被修改或者已删除的且已经被git管理的文档提交倒仓库中。如果只是修改或者删除了已被Git管理的文档，是没必要使用git add 命令的。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;提交的描述信息&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a name=&quot;t4&quot;&gt;&lt;/a&gt;&lt;h3&gt;4. 与远程仓库的交互通信&lt;/h3&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;1) git push 远程推送&lt;/h4&gt;

&lt;p&gt;将本地commit的代码更新到远程版本库中：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote_branch&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# 提交本地local_branch分支作为远程的remote_branch分支，括号部分作为当前目录可以省略&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上命令会将本地local_branch的代码更新到名为remote_name的远程版本库中，远程分支名为remote_branch。
另外，如果想要覆盖远程版本中的代码，则用&lt;code&gt;git push -f ...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2) git pull 版本库获取并尝试合并到本地&lt;/h4&gt;

&lt;p&gt;从其他的版本库（既可以是远程的也可以是本地的）将代码更新合并到本地。其结果相当于&lt;code&gt;git fetch和git merge&lt;/code&gt;，建议采用这个组合。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_branch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上命令就是将remote_name这个版本库的代码更新到本地的local_branch分支上。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;3) git fetch + merge 版本库获取与合并&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt; 会使本地版本库与另一版本库同步，提取本地所没有的数据，为你在同步时的该远端的每一分支提供书签。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_branch&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# remote_branch省略时则抓取remote_name的所有分支&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;该命令能够把remote_name版本库（的remote_branch分支）数据抓取到本地。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge&lt;/code&gt; 能够将任何分支合并到当前分支中去&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;这里填写合并注释&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_branch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_branch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;4) git diff 代码不同处比较（便于上一步的合并）&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; 把本地的代码尚未缓存的代码进行比较&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# 尚未缓存(index)的修改&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cached&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 已经缓存的修改&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAD&lt;/span&gt;  
    
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# 查看简单的diff结果&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch2&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# 查看branch1和branch2的差别&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;区别说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git diff&lt;/code&gt; 此命令比较的是工作目录(Working tree)和暂存区域快照(index)之间的差异
也就是修改之后还没有暂存起来的变化内容；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff --cached&lt;/code&gt; 查看已经暂存起来的文件(index)和上次提交时的快照之间(HEAD)的差异；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff HEAD&lt;/code&gt; 查看工作目录(Working tree)和上次提交时的快照(HEAD)的差异；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&quot;t5&quot;&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;5. 版本标签操作相关命令&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4&gt;1) 本地版本标签操作&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;查看版本：&lt;code&gt;$ git tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建版本：&lt;code&gt;$ git tag [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除版本：&lt;code&gt;$ git tag -d [name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2) 远程版本标签操作&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;查看远程版本：&lt;code&gt;$ git tag -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建远程版本(本地版本push到远程)：&lt;code&gt;$ git push origin [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除远程版本：&lt;code&gt;$ git push origin :refs/tags/[name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;合并远程仓库的tag到本地：&lt;code&gt;$ git pull origin --tags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上传本地tag到远程仓库：&lt;code&gt;$ git push origin --tags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建带注释的tag：&lt;code&gt;$ git tag -a [name] -m &amp;#39;yourMessage&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&quot;t6&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;6. 分支操作相关命令&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4&gt;1) 本地分支操作&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;查看本地分支：&lt;code&gt;$ git branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建本地分支（新分支创建后不会自动切换为当前分支）：&lt;code&gt;$ git branch [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建新分支并立即切换到新分支：&lt;code&gt;$ git checkout -b [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切换分支：&lt;code&gt;$ git checkout [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除分支（d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项）：&lt;code&gt;$ git branch -d [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;合并分支（与当前分支合并）：&lt;code&gt;$ git merge [name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2) 远程分支操作&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;创建远程分支(本地分支push到远程)：&lt;code&gt;$ git push origin [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除远程分支：&lt;code&gt;$ git push origin :heads/[name]&lt;/code&gt; 或 &lt;code&gt;$ git push origin :[name]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;查看远程分支：&lt;code&gt;$ git branch -r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&quot;t7&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;7. 查看日志状态&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4&gt;1) git log 显示分支中的更改记录&lt;/h4&gt;

&lt;p&gt;某分支的按时间排序的列表，当处于该分支时，可以执行&lt;code&gt;git log&lt;/code&gt;以查看。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oneline&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# 紧凑显示&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oneline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# 显示拓扑图，查看历史中什么时候出现了分支、合并&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当需要过滤一些提交记录时可以采用如下的命令：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;只寻找某个特定作者的提交 &lt;code&gt;--author&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;根据日期过滤提交记录 &lt;code&gt;git log –-since –-before&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;根据提交注释过滤提交记录 &lt;code&gt;git log –-grep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# 只显示user作者的提交&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merges&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 只显示3周前到2014.4.18的提交（no-merges代表不显示合并提交）&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p4 depo&amp;quot;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# 查找注释内容含有 “p4 depo”的提交&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2) git show 显示具体修改&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;     
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# 前第n次的提交&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上命令显示提交版本号为&amp;#39;SHA1&amp;#39;的详细修改信息，版本号可以通过&lt;code&gt;git log&lt;/code&gt;的前面一串字符获得。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;3) git status 查看状态&lt;/h4&gt;

&lt;p&gt;采用&lt;code&gt;git status -s&lt;/code&gt;查看当前简短状态，没有&lt;code&gt;-s&lt;/code&gt;则信息比较全面&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&quot;t8&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;8. 版本库还原回退&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4&gt;1) git reset&lt;/h4&gt;

&lt;p&gt;可参考例子&lt;a href=&quot;http://guibin.iteye.com/blog/1014369&quot; title=&quot;Git reset 实例&quot;&gt;http://guibin.iteye.com/blog/1014369&lt;/a&gt;&lt;br&gt;
将当前的分支重设到指定的版本或者HEAD（默认，如果不显示指定commit，默认是HEAD，即最新的一次提交），并且根据[mode]有可能更新index和working directory。&lt;br&gt;
mode的取值可以是hard、soft、mixed、merged、keep，前三者较为常用，下面将详细说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--hard&lt;/code&gt;：重设index和working directory，自从&lt;commit&gt;以来在working directory中的任何改变都被丢弃，并把HEAD指向&lt;commit&gt;；&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# 删除最近的三个commit，将HEAD指向HEAD~3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--soft&lt;/code&gt;：index和working directory中的内容不作任何改变，仅仅把HEAD指向&lt;commit&gt;。&lt;commit&gt;之后的修改内容属于尚未提交的，这时&lt;code&gt;git commit -m&lt;/code&gt;之后可以重新提交。这个模式的效果是，执行完毕后，自从&lt;commit&gt;以来的所有改变都会显示在git status的&amp;quot;Changes to be committed&amp;quot;中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mixed&lt;/code&gt;：&lt;strong&gt;（默认模式）&lt;/strong&gt;仅重置index，但是不重置working directory。这个模式的效果是，working directory中文件的修改都会被保留，不会丢弃，但是也不会被标记成&amp;quot;Changes to be committed&amp;quot;，但是会打出什么还未被更新的报告。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2) git revert&lt;/h4&gt;

&lt;p&gt;用于回滚一些commit。对于一个或者多个已经存在的commit，去除由这些commit引入的改变，并且用一个新的commit来记录这个回滚操作。这个命令要求working tree必须是干净的。&lt;br&gt;
git revert用于用一个commit来记录并回滚早前的commit，经常是一些错误的提交。如果你想干脆扔掉working tree中的东西，可以使用&lt;code&gt;git reset --hard&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  
&lt;span class=&quot;c&quot;&gt;# 丢弃最近的三个commit，把状态恢复到最近的第四个commit，并且提交一个新的commit来记录这次改变。 &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;     
&lt;span class=&quot;c&quot;&gt;# 丢弃从最近的第五个commit（包含）到第二个（不包含）,但是不自动生成commit，这个revert仅仅修改working tree和index&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;git revert 和 git reset的区别&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git revert&lt;/code&gt;是用一次新的commit来回滚之前的commit，&lt;code&gt;git reset&lt;/code&gt;是直接删除指定的commit。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为&lt;code&gt;git revert&lt;/code&gt;是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是&lt;code&gt;git reset&lt;/code&gt;是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset&lt;/code&gt;是把HEAD向后移动了一下，而&lt;code&gt;git revert&lt;/code&gt;是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;3) git rebase&lt;/h4&gt;

&lt;p&gt;该命令就是重新定义（re）起点（base）的作用，即重新定义分支的版本库状态。要搞清楚这个东西，要先看看版本库状态切换的两种情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们知道，在某个分支上，我们可以通过上面介绍的&lt;code&gt;git reset&lt;/code&gt;，实现将当前分支切换到本分支以前的任何一个版本状态，即所谓的“回溯”。即实现了本分支的“后悔药”。也即版本控制系统的初衷。&lt;/li&gt;
&lt;li&gt;还有另一种情况，当我们的项目有多个分支的时候。我们除了在本地开发的时候可能会“回溯”外，也常常会将和自己并行开发的别人的分支修改包含到自己本地来。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/lihaoweiv/article/details/7740031&quot; title=&quot;rebase&quot;&gt;http://blog.csdn.net/lihaoweiv/article/details/7740031&lt;/a&gt;
&lt;a href=&quot;http://www.cnblogs.com/dabaopku/archive/2012/06/24/2559652.html&quot; title=&quot;rebase2&quot;&gt;http://www.cnblogs.com/dabaopku/archive/2012/06/24/2559652.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Aug 2014 03:04:00 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/backup/2014/08/28/gitcommands.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/backup/2014/08/28/gitcommands.html</guid>
        
        
        <category>backup</category>
        
      </item>
    
      <item>
        <title>测试文章14</title>
        <description>&lt;h2&gt;测试文章14&lt;/h2&gt;

&lt;p&gt;person of interests中文的 的&lt;/p&gt;

&lt;p&gt;25 Aug 2014&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 03:55:16 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/reading/2014/08/25/readingtest5.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/reading/2014/08/25/readingtest5.html</guid>
        
        
        <category>reading</category>
        
      </item>
    
      <item>
        <title>测试文章13</title>
        <description>&lt;h2&gt;测试文章13&lt;/h2&gt;

&lt;p&gt;person of interests中文的 的&lt;/p&gt;

&lt;p&gt;24 Aug 2014&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Aug 2014 03:55:16 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/reading/2014/08/24/readingtest4.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/reading/2014/08/24/readingtest4.html</guid>
        
        
        <category>reading</category>
        
      </item>
    
      <item>
        <title>测试文章12</title>
        <description>&lt;h2&gt;测试文章12&lt;/h2&gt;

&lt;p&gt;person of interests中文的 的&lt;/p&gt;

&lt;p&gt;23 Aug 2014&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Aug 2014 03:55:16 +0800</pubDate>
        <link>http://wuxichen.github.io/Myblog/reading/2014/08/23/readingtest3.html</link>
        <guid isPermaLink="true">http://wuxichen.github.io/Myblog/reading/2014/08/23/readingtest3.html</guid>
        
        
        <category>reading</category>
        
      </item>
    
  </channel>
</rss>
